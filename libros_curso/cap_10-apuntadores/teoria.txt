
una variable PUNTERO es una varibale que contiene direcciones de otras varibales. una varibale comun en C contiene valores, en cambio un puntero CONTIENE DIRECCIONES DE MEMORIA DONDE SE ALMACENAN DATOS. 

-cunado una varibale se declara, se asocian 3 atributos fundamentales de la misma. su nombre, su tipo y su direccion en memoria. 

como puede ser: 

int n; -> tipo (entero) - nombre (n) - direccion en memoria (0xFFA)

al valor de una varibale que puede acceder por medio de su nombre, por ejemplo se puede imprimir el valor de n con:  

    prinft("%d",n); 

a la direccion de la varibale se accede por medio del OPERARO DE DIRECCION <<&>> por ejemplo podemos imprimir 

printf("%p",&n);


----------------------------------

10.2 concepto de puntero :

cada vez que se declare una varibale en C el compilador estabelce un area de memoria para almacenar el contenodo de la varibale, por ejemplo cunado se declara una varibale entera (int) el compilador asigna 2 bytes en memoria. 

un puntero es una direccion de memoria. un puntero en C idnica en donde encoentrar algo. 
los punteros se rigen por reglas basicas como: 

-un puntero es una varibale como cualquier otra 
-una varibale puntero contiene una direccion que apunta a otra posicion en memoria 
-en esa posicion se alamcenan los datos a los que apunta el puntero
-un puntero apunta a una varibale de memoria. 

-> una varibale puntero como cualquier otra vairbale se le asignara un espacio en memoria, solo que cunado se quiera haga referencia a esta, lo que va a traer no sera un valor si no que el compilador ira a ese espacio en memoria se dara cuenta que no es el valor de X varibale si no que es la direccion de otra por lo que ira a X direccion que guardaba el puntero y ahora si retorna el valor a cual apuntaba la varibale apuntador. 


---------------------------------------

10.2.1 declaracion de punteros 

para declarar una varibale como puntero se hace uso del <<*>> antes de su nombre y despues del tipo de dato ejmp: 

int *ptr1;
long* ptr2;
char* ptr3;

un operador <<*>> en una declaracion indica que la variabel declarada almacena una direccion de un tipo de dato especifico. 

-------------------------------------------------

10.2.2 incialcion de punteros 

como cualquier otra varibale en C un puntero debe ser inicalizado y en este caso con mas razon, pero porque?, recrodemos que un puntero apunta a memeoria, por lo que si no se incializa y se manda a llamar, lo que va a devolver sera basura de memoria esto puede o no ser perjudicial, por ejemplo si es el inicio de una cola, perder al que va antes de el es fatal porque ahora se perdera el hilo de la cola. 

pero para asignar una direccion de meoria a un puntero se utiliza el operador de referencia <<&>> por ejemplo: 

&valor;

-asignar memoria (estaticamante) defineidno una varibale y que el puntero apunte al valor de la variable 

int i;
int *p;

p= &i;

-asignar un valor a la direccion de memoria 

*p = 50; <- este modifica <<i>> que ahora vale 50. 

el operador <<&>> devuelve la direccion de la varibale a la cual se aplica. 

es un error asignar un valor a un contenido de una variable puntero si previamnete no se ha incializado con la direccion de una varibale o bien le ha asignaod dinanicament ememoria 
float *px;

*px = 23.5; <- erro, px no contiene direccion 

existen un segundo memoto de iniclizacion es medinate asignacion dinamica de memoria. utiliza las funciones de asignacion de memoria <<malloc()>> , <<calloc()>> , <<realloc()>> y <<free()>>, 

-----------------------------------------------------------

10.2.3 indireccion de punteros. 

el uso de un puntero para obtener el valor al que punta, se denomica <<indireccionar el puntero>>, para esto se utiliza el operadro de indireccion <<*>>

-> en otras palabras, <<*>> funciona para decirle al compilador que la varibale es un apuntador y para tambien para obtener del valor de la direccion a la cual esta apuntando 

como: 

int edad;
int *p_edad;

p_edad = &edad;

*p_edad = 50;

--------------------------------------------------------------

10.2.4 PG 347

-> punteros y verificacion de tipos 

los punteros se anlzan a tipo de dato especifico, eso quiere decir que si se define un puntero como <<float>> no lo podemos asignar a otra varibale puntero <<int>>, (asi tal cual no, se puede hacer un casting, lo que es convertir una varibale en otra solo asi, pero por si solo no se puede. )

-----------------------------------------------------------------

10.3 PUNTEROS - NULL y void

un puntero inicado adecuadamnte apunta a una posicion en memoria en especifico, pero al igual que una varibale normal podemos delcarar mas no inicar la varibale, esta varibale puntero a punta a una direccion random de la memoria a lo que se le concoe como basura. 

para inicar un puntero correctamente pero aun no queremos que apunte a nada o aun no se decide a que varibale o valor se le asignara estan los valores NULL y void 

-punteo nulo (NULL) no apunta a ninguna parte, un puntero nulo no direcciona a ningun dato valido en memoria. esto se hace asignanod a la variable <<NULL>>

algunas funciones C tambein devuelven el valor NULL si enceuntran un error, como puede ser la asignacion de memoria dinamica 

char *p_edad
p=malloc(12 * sizeof(char));

if(p == null) puts("error al asignar memoria");

en C se puede declarar un puntero de modo que apunte a cualquier tipo de dato, es decri no se asgina un tipo de dato especidifco. el metood es declarar un puntero como un puntro <<void *>>, denominado puntero generico.

void *ptr; 

este puntero puede direccionar a cualquier posicion en memoria. pero el puntero no esta unido a un tipo de dato especidifco los puntero <<void>> pueden direccionar una varibale float, char o una pociion arbitraria o una cadena.

-----------------------------------------------
10.4 punteros a punteros 

un puntero puede direccionar a otra varibale puntero, para esto en vez se asignar con un astericto se hace con 2 <<int **ptr_2>>

int valor-e = 100;

int ptr1 = &valor-e;
int **ptr5 =&ptr1;

en este caso lo quee esta pasando es que <<**ptr5>> contiene la direccion de <<*ptr1>> el cual tambien es un puntero a apunta a <<valor-e>> osea apunta a una variable que tiene la direccion de la varibale final. 


----------------------------------------------------

10.5 punteros y arreglos

se pueden direccionar arreglos como si fueran punteros y punteros como si fueran arreglos. 

10.5.1 nombres de arreglos como punteros 

el nombre de un arreglo es un puntero, contiene la direccion en memoria de comienzo de la secueincia de elementos que forma el arreglo. es un puntero constante ya que no se puede modificar solo se puede acceder al indexar los elemntos del arreglo. 

ejmp: 

float v[10];
float *p;
float x =100.5;
int j;

for(j=0; j<10;j++){

    v = &x;
    p=v+4;

    *(v+j) = j* 10.0; //accedera a la posicion en memoria que hay en la posicion V + incremento(j - lo que lleve j)

}


--------------------------------------------------------------------

10.6 arreglos de punteros

un array de punteros es un arreglo que contiene como elementos punteros. en donde cada uno de cuales aputan a un tipo de dato especifico. por ejemplo 

int *ptr[10]; -> reserva un arreglo de 10 punteros a entreos 


-----------------------------------------------------
10.7 PUNTROS DE CADENAS 

los punteros se puden utilizar en lugar de indices de arreglos, considerante el sigueinte arreglo 

char alfabeto[27]="ABCDEFGHIJKLMNOPQRSTUVWXYZ";

-> declaramos un puntero char 

char *p;

establecemos que <<p>> apunte al primre caracter del arreglo 

p = &alfabeto[0];

de modo que si imporimirmos ahora mismo 

->printf("%c \n",*p); ->outpu = A


ejemplos: 
C:\Users\erikG\OneDrive\Escritorio\repasoC_crito\libros_curso\cap_10-apuntadores\EJMP_10_7_1-punteros_vs_arreglos.c


-------------------------------------------------------------------


10.8 aritmetica de punteros -> pg 354 PDF 

un puntero es una vribale que se puede modificar, a diferencia del arreglo, en cunto su tamanio por ejemplo un arreglo de 10 elementos sera de 10 elementos por todos siempre y para siempre amen, al menso que se modifique especidifcamente ese tamanio pero seria borrar todo su contenido, un arreglo de tamanio estatico ocupe o no ocupe todo sus espacios ocupa x espacio en memoria por lo que si no se ocupan sus espacios es un desperdicio de espacio, un puntero es una varibale mas por lo que se pueden realizan ciertas operaciones arimeticas sobre ellos. 

a un puntero se le puede sumar o restar un entero, esto que hace para que apunte N elemenos adelante o atras de la posicion actual. 

podemos ver en e siguiente ejemplos 

int v[10]; // -> arreglo estativo de 10 posiciones de tipo entero 

int *P; //puntero sin inicalizar. 

p = v

(v+4); // apunta al elementos 4

p = p+6;  // contiene la direccion del 7mo elementos 

OPERACIONES NO VALIDAS 

-no se pueden sumar dos Punteros
-no se pueden multiplicar 2 punteros (creo que puntero por constante si)
-no se pueden dividir dos punteros 


